import os
import pygame
##############################################################
# Basic initialization (essential settings)
pygame.init()

# Screen size settings
screen_width = 640  # Width
screen_height = 480  # Height
screen = pygame.display.set_mode((screen_width, screen_height))

# Screen title setting
pygame.display.set_caption("Nado Pang")

# FPS
clock = pygame.time.Clock()
##############################################################

# 1. User game initialization (background screen, game images, coordinates, speeds, fonts, etc.)
current_path = os.path.dirname(__file__)  # Returns the current file location
image_path = os.path.join(current_path, "images")  # Returns the images folder location

# Creating background
background = pygame.image.load(os.path.join(image_path, "background.png"))

# Creating stage
stage = pygame.image.load(os.path.join(image_path, "stage.png"))
stage_size = stage.get_rect().size
stage_height = stage_size[1]  # To place the character on top of the stage

# Creating character
character = pygame.image.load(os.path.join(image_path, "character.png"))
character_size = character.get_rect().size
character_width = character_size[0]
character_height = character_size[1]
character_x_pos = (screen_width / 2) - (character_width / 2)
character_y_pos = screen_height - character_height - stage_height

# Character movement direction
character_to_x = 0

# Character movement speed
character_speed = 5

# Creating weapons
weapon = pygame.image.load(os.path.join(image_path, "weapon.png"))
weapon_size = weapon.get_rect().size
weapon_width = weapon_size[0]

# Multiple shots possible for weapons
weapons = []

# Weapon movement speed
weapon_speed = 10

# Creating balls (handling 4 different sizes separately)
ball_images = [
    pygame.image.load(os.path.join(image_path, "balloon1.png")),
    pygame.image.load(os.path.join(image_path, "balloon2.png")),
    pygame.image.load(os.path.join(image_path, "balloon3.png")),
    pygame.image.load(os.path.join(image_path, "balloon4.png"))]

# Initial speed according to ball sizes
ball_speed_y = [-18, -15, -12, -9]  # Corresponding to index 0, 1, 2, 3

# Balls
balls = []

# Adding initial large ball
balls.append({
    "pos_x": 50,  # Ball's x coordinate
    "pos_y": 50,  # Ball's y coordinate
    "img_idx": 0,  # Ball's image index
    "to_x": 3,  # x-axis movement direction, -3 for left, 3 for right
    "to_y": -6,  # y-axis movement direction
    "init_spd_y": ball_speed_y[0]})  # Initial y speed

# Variables to store removed weapons and balls
weapon_to_remove = -1
ball_to_remove = -1

# Font definition
game_font = pygame.font.Font(None, 40)
total_time = 100
start_ticks = pygame.time.get_ticks()  # Start time definition

# Game end message
# Time Over (time exceeded, failure)
# Mission Complete (success)
# Game Over (character hit by a ball, failure)
game_result = "Game Over"

running = True
while running:
    dt = clock.tick(30)
    
    # 2. Event handling (keyboard, mouse, etc.)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False 

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:  # Move character to the left
                character_to_x -= character_speed
            elif event.key == pygame.K_RIGHT:  # Move character to the right
                character_to_x += character_speed
            elif event.key == pygame.K_SPACE:  # Fire weapon
                weapon_x_pos = character_x_pos + (character_width / 2) - (weapon_width / 2)
                weapon_y_pos = character_y_pos
                weapons.append([weapon_x_pos, weapon_y_pos])
        
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                character_to_x = 0

    # 3. Define game character positions
    character_x_pos += character_to_x

    if character_x_pos < 0:
        character_x_pos = 0
    elif character_x_pos > screen_width - character_width:
        character_x_pos = screen_width - character_width

    # Adjust weapon positions
    weapons = [[w[0], w[1] - weapon_speed] for w in weapons]  # Move weapons upwards

    # Remove weapons that hit the ceiling
    weapons = [[w[0], w[1]] for w in weapons if w[1] > 0]
    
    # Define ball positions
    for ball_idx, ball_val in enumerate(balls):
        ball_pos_x = ball_val["pos_x"]
        ball_pos_y = ball_val["pos_y"]
        ball_img_idx = ball_val["img_idx"]

        ball_size = ball_images[ball_img_idx].get_rect().size
        ball_width = ball_size[0]
        ball_height = ball_size[1]

        # Adjust ball movement when hitting the horizontal walls (bounce effect)
        if ball_pos_x < 0 or ball_pos_x > screen_width - ball_width:
            ball_val["to_x"] = ball_val["to_x"] * -1

        # Vertical position
        # Bounce off the stage
        if ball_pos_y >= screen_height - stage_height - ball_height:
            ball_val["to_y"] = ball_val["init_spd_y"]
        else:  # Increase speed otherwise
            ball_val["to_y"] += 0.5

        ball_val["pos_x"] += ball_val["to_x"]
        ball_val["pos_y"] += ball_val["to_y"]

    # 4. Collision handling

    # Update character rect information
    character_rect = character.get_rect()
    character_rect.left = character_x_pos
    character_rect.top = character_y_pos

    for ball_idx, ball_val in enumerate(balls):
        ball_pos_x = ball_val["pos_x"]
        ball_pos_y = ball_val["pos_y"]
        ball_img_idx = ball_val["img_idx"]

        # Update ball rect information
        ball_rect = ball_images[ball_img_idx].get_rect()
        ball_rect.left = ball_pos_x
        ball_rect.top = ball_pos_y

        # Collision check between character and balls
        if character_rect.colliderect(ball_rect):
            running = False
            break

        # Collision handling between balls and weapons
        for weapon_idx, weapon_val in enumerate(weapons):
            weapon_pos_x = weapon_val[0]
            weapon_pos_y = weapon_val[1]

            # Update weapon rect information
            weapon_rect = weapon.get_rect()
            weapon_rect.left = weapon_pos_x
            weapon_rect.top = weapon_pos_y

            # Collision check
            if weapon_rect.colliderect(ball_rect):
                weapon_to_remove = weapon_idx  # Set value to remove the weapon
                ball_to_remove = ball_idx  # Set value to remove the ball

                # Divide into smaller balls if it's not the smallest size ball
                if ball_img_idx < 3:
                    # Current ball size information
                    ball_width = ball_rect.size[0]
                    ball_height = ball_rect.size[1]

                    # Information for smaller ball
                    small_ball_rect = ball_images[ball_img_idx + 1].get_rect()
                    small_ball_width = small_ball_rect.size[0]
                    small_ball_height = small_ball_rect.size[1]

                    # Small ball bouncing to the left
                    balls.append({
                        "pos_x": ball_pos_x + (ball_width / 2) - (small_ball_width / 2),
                        "pos_y": ball_pos_y + (ball_height / 2) - (small_ball_height / 2),
                        "img_idx": ball_img_idx + 1,
                        "to_x": -3,
                        "to_y": -6,
                        "init_spd_y": ball_speed_y[ball_img_idx + 1]})

                    # Small ball bouncing to the right
                    balls.append({
                        "pos_x": ball_pos_x + (ball_width / 2) - (small_ball_width / 2),
                        "pos_y": ball_pos_y + (ball_height / 2) - (small_ball_height / 2),
                        "img_idx": ball_img_idx + 1,
                        "to_x": 3,
                        "to_y": -6,
                        "init_spd_y": ball_speed_y[ball_img_idx + 1]})

                break
        else:  # Continue the game if conditions are not met
            continue

        break

    # Remove collided balls or weapons
    if ball_to_remove > -1:
        del balls[ball_to_remove]
        ball_to_remove = -1

    if weapon_to_remove > -1:
        del weapons[weapon_to_remove]
        weapon_to_remove = -1

    # End the game if all balls are removed (success)
    if len(balls) == 0:
        game_result = "Mission Complete"
        running = False

    # 5. Draw on the screen
    screen.blit(background, (0, 0))
    
    for weapon_x_pos, weapon_y_pos in weapons:
        screen.blit(weapon, (weapon_x_pos, weapon_y_pos))

    for idx, val in enumerate(balls):
        ball_pos_x = val["pos_x"] 
        ball_pos_y = val["pos_y"]
        ball_img_idx = val["img_idx"]
        screen.blit(ball_images[ball_img_idx], (ball_pos_x, ball_pos_y))

    screen.blit(stage, (0, screen_height - stage_height))
    screen.blit(character, (character_x_pos, character_y_pos))
    
    # Calculate elapsed time
    elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000  # ms -> s
    timer = game_font.render("Time : {}".format(int(total_time - elapsed_time)), True, (255, 255, 255))
    screen.blit(timer, (10, 10))

    # If time is over
    if total_time - elapsed_time <= 0:
        game_result = "Time Over"
        running = False

    pygame.display.update()

# Game over message
msg = game_font.render(game_result, True, (255, 255, 0))  # Yellow color
msg_rect = msg.get_rect(center=(int(screen_width / 2), int(screen_height / 2)))
screen.blit(msg, msg_rect)
pygame.display.update()

# Wait for 2 seconds
pygame.time.delay(2000)

pygame.quit()
